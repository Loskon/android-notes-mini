public class UlTagHandler implements Html.TagHandler{
        @Override
        public void handleTag(boolean opening, String tag, Editable output,
                              XMLReader xmlReader) {
            if(tag.equals("ul") && !opening) output.append("\n");
            if(tag.equals("li") && opening) output.append("\n\tâ€¢");
        }
    }

    public int getCurrentCursorLine(EditText editText)
    {
        int selectionStart = Selection.getSelectionStart(editText.getText());
        Layout layout = editText.getLayout();

        if (selectionStart != -1) {
            return layout.getLineForOffset(selectionStart);
        }

        return -1;
    }

    public void otherClick(View view) {
        String text = "<img src='stack.jpg'/>";
        String text3 = "<img src='overflow.jpg'/>";

        int cursorPosition = getCurrentCursorLine(editTitleText);
        int start = editTitleText.getLayout().getLineStart(cursorPosition);
        int end = editTitleText.getLayout().getLineEnd(cursorPosition);

        String text2 = Html.fromHtml(editTitleText.getText().subSequence(start, end).toString().trim() , new ImageGetter(), new UlTagHandler()).toString();
        String character = Html.fromHtml(text).toString();
        String character2 = Html.fromHtml(text3).toString();

        String str = editTitleText.getText().toString().trim();
        if(str.length()!=0){
            str  = str.substring(1);

            editTitleText.setText ( str );
        }

        if (text2.contains(character)) {

             start = editTitleText.getLayout().getLineStart(cursorPosition);
             end = editTitleText.getLayout().getLineEnd(cursorPosition);

            editTitleText.setText(Html.fromHtml(text3 +
                            editTitleText.getText().subSequence(start, end).toString().trim(),
                    new ImageGetter(), new UlTagHandler()));
        } else {

            start = editTitleText.getLayout().getLineStart(cursorPosition);
            end = editTitleText.getLayout().getLineEnd(cursorPosition);

            editTitleText.setText(Html.fromHtml(text +
                    editTitleText.getText().subSequence(start, end).toString().trim(),
                    new ImageGetter(), new UlTagHandler()));
        }




        //     List<CharSequence> lines = new ArrayList<>();
        //        int count = editTitleText.getLineCount();
        //        for (int line = 0; line < count; line++) {
        //            int start = editTitleText.getLayout().getLineStart(line);
        //            int end = editTitleText.getLayout().getLineEnd(line);
        //            CharSequence substring = editTitleText.getText().subSequence(start, end);
        //            lines.add(substring);
        //        }
        //
        //        Toast.makeText(this, ""+ lines.size(), Toast.LENGTH_SHORT).show();
    }

private class ImageGetter implements Html.ImageGetter {

        public Drawable getDrawable(String source) {
            int id;

            if (source.equals("stack.jpg")) {
                id = R.drawable.baseline_check_box_outline_blank_black_24;
            }
            else if (source.equals("overflow.jpg")) {
                id = R.drawable.baseline_delete_black_24;
            }
            else {
                return null;
            }

            Drawable d = getResources().getDrawable(id);
            d.setBounds(0,0,d.getIntrinsicWidth(),d.getIntrinsicHeight());
            return d;
        }
    };
